// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data_server {

namespace {

const ::google::protobuf::Descriptor* MysqlConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fconf_2eproto() {
  protobuf_AddDesc_server_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_conf.proto");
  GOOGLE_CHECK(file != NULL);
  MysqlConf_descriptor_ = file->message_type(0);
  static const int MysqlConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, db_name_),
  };
  MysqlConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlConf_descriptor_,
      MysqlConf::default_instance_,
      MysqlConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlConf));
  RedisConf_descriptor_ = file->message_type(1);
  static const int RedisConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, port_),
  };
  RedisConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisConf_descriptor_,
      RedisConf::default_instance_,
      RedisConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisConf));
  ServerConfig_descriptor_ = file->message_type(2);
  static const int ServerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, svr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, log4cpp_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, brpc_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, data_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, data_point_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, mod_data_table_),
  };
  ServerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlConf_descriptor_, &MysqlConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisConf_descriptor_, &RedisConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerConfig_descriptor_, &ServerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fconf_2eproto() {
  delete MysqlConf::default_instance_;
  delete MysqlConf_reflection_;
  delete RedisConf::default_instance_;
  delete RedisConf_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
}

void protobuf_AddDesc_server_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021server_conf.proto\022\013data_server\"V\n\tMysq"
    "lConf\022\014\n\004host\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\022\016\n\006pas"
    "swd\030\003 \002(\t\022\014\n\004user\030\004 \002(\t\022\017\n\007db_name\030\005 \002(\t"
    "\"\'\n\tRedisConf\022\014\n\004host\030\001 \002(\t\022\014\n\004port\030\002 \002("
    "\005\"\243\001\n\014ServerConfig\022\020\n\010svr_port\030\001 \002(\005\022\024\n\014"
    "log4cpp_conf\030\002 \002(\t\022\020\n\010brpc_log\030\003 \002(\t\022\'\n\007"
    "data_db\030\004 \002(\0132\026.data_server.MysqlConf\022\030\n"
    "\020data_point_table\030\005 \002(\t\022\026\n\016mod_data_tabl"
    "e\030\006 \002(\t", 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_conf.proto", &protobuf_RegisterTypes);
  MysqlConf::default_instance_ = new MysqlConf();
  RedisConf::default_instance_ = new RedisConf();
  ServerConfig::default_instance_ = new ServerConfig();
  MysqlConf::default_instance_->InitAsDefaultInstance();
  RedisConf::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fconf_2eproto {
  StaticDescriptorInitializer_server_5fconf_2eproto() {
    protobuf_AddDesc_server_5fconf_2eproto();
  }
} static_descriptor_initializer_server_5fconf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MysqlConf::kHostFieldNumber;
const int MysqlConf::kPortFieldNumber;
const int MysqlConf::kPasswdFieldNumber;
const int MysqlConf::kUserFieldNumber;
const int MysqlConf::kDbNameFieldNumber;
#endif  // !_MSC_VER

MysqlConf::MysqlConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlConf::InitAsDefaultInstance() {
}

MysqlConf::MysqlConf(const MysqlConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlConf::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlConf::~MysqlConf() {
  SharedDtor();
}

void MysqlConf::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (db_name_ != &::google::protobuf::internal::kEmptyString) {
    delete db_name_;
  }
  if (this != default_instance_) {
  }
}

void MysqlConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlConf_descriptor_;
}

const MysqlConf& MysqlConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconf_2eproto();  return *default_instance_;
}

MysqlConf* MysqlConf::default_instance_ = NULL;

MysqlConf* MysqlConf::New() const {
  return new MysqlConf;
}

void MysqlConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_db_name()) {
      if (db_name_ != &::google::protobuf::internal::kEmptyString) {
        db_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_db_name;
        break;
      }
      
      // required string db_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // required string db_name = 5;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->db_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // required string db_name = 5;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->db_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string db_name = 5;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlConf::MergeFrom(const MysqlConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_db_name()) {
      set_db_name(from.db_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlConf::CopyFrom(const MysqlConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MysqlConf::Swap(MysqlConf* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(passwd_, other->passwd_);
    std::swap(user_, other->user_);
    std::swap(db_name_, other->db_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlConf_descriptor_;
  metadata.reflection = MysqlConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisConf::kHostFieldNumber;
const int RedisConf::kPortFieldNumber;
#endif  // !_MSC_VER

RedisConf::RedisConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedisConf::InitAsDefaultInstance() {
}

RedisConf::RedisConf(const RedisConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedisConf::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisConf::~RedisConf() {
  SharedDtor();
}

void RedisConf::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void RedisConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisConf_descriptor_;
}

const RedisConf& RedisConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconf_2eproto();  return *default_instance_;
}

RedisConf* RedisConf::default_instance_ = NULL;

RedisConf* RedisConf::New() const {
  return new RedisConf;
}

void RedisConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedisConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedisConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedisConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisConf::MergeFrom(const RedisConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConf::CopyFrom(const RedisConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RedisConf::Swap(RedisConf* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisConf_descriptor_;
  metadata.reflection = RedisConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConfig::kSvrPortFieldNumber;
const int ServerConfig::kLog4CppConfFieldNumber;
const int ServerConfig::kBrpcLogFieldNumber;
const int ServerConfig::kDataDbFieldNumber;
const int ServerConfig::kDataPointTableFieldNumber;
const int ServerConfig::kModDataTableFieldNumber;
#endif  // !_MSC_VER

ServerConfig::ServerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerConfig::InitAsDefaultInstance() {
  data_db_ = const_cast< ::data_server::MysqlConf*>(&::data_server::MysqlConf::default_instance());
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerConfig::SharedCtor() {
  _cached_size_ = 0;
  svr_port_ = 0;
  log4cpp_conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brpc_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_db_ = NULL;
  data_point_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mod_data_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  if (log4cpp_conf_ != &::google::protobuf::internal::kEmptyString) {
    delete log4cpp_conf_;
  }
  if (brpc_log_ != &::google::protobuf::internal::kEmptyString) {
    delete brpc_log_;
  }
  if (data_point_table_ != &::google::protobuf::internal::kEmptyString) {
    delete data_point_table_;
  }
  if (mod_data_table_ != &::google::protobuf::internal::kEmptyString) {
    delete mod_data_table_;
  }
  if (this != default_instance_) {
    delete data_db_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconf_2eproto();  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New() const {
  return new ServerConfig;
}

void ServerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_port_ = 0;
    if (has_log4cpp_conf()) {
      if (log4cpp_conf_ != &::google::protobuf::internal::kEmptyString) {
        log4cpp_conf_->clear();
      }
    }
    if (has_brpc_log()) {
      if (brpc_log_ != &::google::protobuf::internal::kEmptyString) {
        brpc_log_->clear();
      }
    }
    if (has_data_db()) {
      if (data_db_ != NULL) data_db_->::data_server::MysqlConf::Clear();
    }
    if (has_data_point_table()) {
      if (data_point_table_ != &::google::protobuf::internal::kEmptyString) {
        data_point_table_->clear();
      }
    }
    if (has_mod_data_table()) {
      if (mod_data_table_ != &::google::protobuf::internal::kEmptyString) {
        mod_data_table_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 svr_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svr_port_)));
          set_has_svr_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log4cpp_conf;
        break;
      }
      
      // required string log4cpp_conf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log4cpp_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log4cpp_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log4cpp_conf().data(), this->log4cpp_conf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_brpc_log;
        break;
      }
      
      // required string brpc_log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brpc_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brpc_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brpc_log().data(), this->brpc_log().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_db;
        break;
      }
      
      // required .data_server.MysqlConf data_db = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_point_table;
        break;
      }
      
      // required string data_point_table = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_point_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_point_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_point_table().data(), this->data_point_table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mod_data_table;
        break;
      }
      
      // required string mod_data_table = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_data_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mod_data_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mod_data_table().data(), this->mod_data_table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 svr_port = 1;
  if (has_svr_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->svr_port(), output);
  }
  
  // required string log4cpp_conf = 2;
  if (has_log4cpp_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log4cpp_conf().data(), this->log4cpp_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->log4cpp_conf(), output);
  }
  
  // required string brpc_log = 3;
  if (has_brpc_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brpc_log().data(), this->brpc_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->brpc_log(), output);
  }
  
  // required .data_server.MysqlConf data_db = 4;
  if (has_data_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_db(), output);
  }
  
  // required string data_point_table = 5;
  if (has_data_point_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_point_table().data(), this->data_point_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->data_point_table(), output);
  }
  
  // required string mod_data_table = 6;
  if (has_mod_data_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mod_data_table().data(), this->mod_data_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mod_data_table(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 svr_port = 1;
  if (has_svr_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->svr_port(), target);
  }
  
  // required string log4cpp_conf = 2;
  if (has_log4cpp_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log4cpp_conf().data(), this->log4cpp_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log4cpp_conf(), target);
  }
  
  // required string brpc_log = 3;
  if (has_brpc_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brpc_log().data(), this->brpc_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brpc_log(), target);
  }
  
  // required .data_server.MysqlConf data_db = 4;
  if (has_data_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_db(), target);
  }
  
  // required string data_point_table = 5;
  if (has_data_point_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_point_table().data(), this->data_point_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data_point_table(), target);
  }
  
  // required string mod_data_table = 6;
  if (has_mod_data_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mod_data_table().data(), this->mod_data_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mod_data_table(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 svr_port = 1;
    if (has_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svr_port());
    }
    
    // required string log4cpp_conf = 2;
    if (has_log4cpp_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log4cpp_conf());
    }
    
    // required string brpc_log = 3;
    if (has_brpc_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brpc_log());
    }
    
    // required .data_server.MysqlConf data_db = 4;
    if (has_data_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_db());
    }
    
    // required string data_point_table = 5;
    if (has_data_point_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_point_table());
    }
    
    // required string mod_data_table = 6;
    if (has_mod_data_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mod_data_table());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_port()) {
      set_svr_port(from.svr_port());
    }
    if (from.has_log4cpp_conf()) {
      set_log4cpp_conf(from.log4cpp_conf());
    }
    if (from.has_brpc_log()) {
      set_brpc_log(from.brpc_log());
    }
    if (from.has_data_db()) {
      mutable_data_db()->::data_server::MysqlConf::MergeFrom(from.data_db());
    }
    if (from.has_data_point_table()) {
      set_data_point_table(from.data_point_table());
    }
    if (from.has_mod_data_table()) {
      set_mod_data_table(from.mod_data_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_data_db()) {
    if (!this->data_db().IsInitialized()) return false;
  }
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other != this) {
    std::swap(svr_port_, other->svr_port_);
    std::swap(log4cpp_conf_, other->log4cpp_conf_);
    std::swap(brpc_log_, other->brpc_log_);
    std::swap(data_db_, other->data_db_);
    std::swap(data_point_table_, other->data_point_table_);
    std::swap(mod_data_table_, other->mod_data_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_server

// @@protoc_insertion_point(global_scope)
