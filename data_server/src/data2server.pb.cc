// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data2server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data2server {

namespace {

const ::google::protobuf::Descriptor* DataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResp_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* DataService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data2server_2eproto() {
  protobuf_AddDesc_data2server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data2server.proto");
  GOOGLE_CHECK(file != NULL);
  DataReq_descriptor_ = file->message_type(0);
  static const int DataReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, collector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, conn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, orig_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, scale_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, coef_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, coef_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, data_time_),
  };
  DataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataReq_descriptor_,
      DataReq::default_instance_,
      DataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataReq));
  DataResp_descriptor_ = file->message_type(1);
  static const int DataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResp, errmsg_),
  };
  DataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResp_descriptor_,
      DataResp::default_instance_,
      DataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResp));
  DataService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data2server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataReq_descriptor_, &DataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResp_descriptor_, &DataResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data2server_2eproto() {
  delete DataReq::default_instance_;
  delete DataReq_reflection_;
  delete DataResp::default_instance_;
  delete DataResp_reflection_;
}

void protobuf_AddDesc_data2server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021data2server.proto\022\013data2server\"\307\001\n\007Dat"
    "aReq\022\020\n\010building\030\001 \002(\t\022\021\n\tcollector\030\002 \002("
    "\t\022\021\n\tconn_type\030\003 \002(\r\022\016\n\006device\030\004 \002(\t\022\021\n\t"
    "orig_data\030\005 \002(\002\022\022\n\nscale_data\030\006 \002(\002\022\014\n\004d"
    "esc\030\007 \002(\t\022\014\n\004unit\030\010 \002(\t\022\016\n\006coef_A\030\t \002(\002\022"
    "\016\n\006coef_B\030\n \002(\002\022\021\n\tdata_time\030\013 \002(\t\"+\n\010Da"
    "taResp\022\017\n\007errcode\030\001 \002(\005\022\016\n\006errmsg\030\002 \002(\t2"
    "B\n\013DataService\0223\n\004Send\022\024.data2server.Dat"
    "aReq\032\025.data2server.DataRespB\003\200\001\001", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data2server.proto", &protobuf_RegisterTypes);
  DataReq::default_instance_ = new DataReq();
  DataResp::default_instance_ = new DataResp();
  DataReq::default_instance_->InitAsDefaultInstance();
  DataResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data2server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data2server_2eproto {
  StaticDescriptorInitializer_data2server_2eproto() {
    protobuf_AddDesc_data2server_2eproto();
  }
} static_descriptor_initializer_data2server_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DataReq::kBuildingFieldNumber;
const int DataReq::kCollectorFieldNumber;
const int DataReq::kConnTypeFieldNumber;
const int DataReq::kDeviceFieldNumber;
const int DataReq::kOrigDataFieldNumber;
const int DataReq::kScaleDataFieldNumber;
const int DataReq::kDescFieldNumber;
const int DataReq::kUnitFieldNumber;
const int DataReq::kCoefAFieldNumber;
const int DataReq::kCoefBFieldNumber;
const int DataReq::kDataTimeFieldNumber;
#endif  // !_MSC_VER

DataReq::DataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataReq::InitAsDefaultInstance() {
}

DataReq::DataReq(const DataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataReq::SharedCtor() {
  _cached_size_ = 0;
  building_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collector_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_type_ = 0u;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_data_ = 0;
  scale_data_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coef_a_ = 0;
  coef_b_ = 0;
  data_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReq::~DataReq() {
  SharedDtor();
}

void DataReq::SharedDtor() {
  if (building_ != &::google::protobuf::internal::kEmptyString) {
    delete building_;
  }
  if (collector_ != &::google::protobuf::internal::kEmptyString) {
    delete collector_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (data_time_ != &::google::protobuf::internal::kEmptyString) {
    delete data_time_;
  }
  if (this != default_instance_) {
  }
}

void DataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReq_descriptor_;
}

const DataReq& DataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data2server_2eproto();  return *default_instance_;
}

DataReq* DataReq::default_instance_ = NULL;

DataReq* DataReq::New() const {
  return new DataReq;
}

void DataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_building()) {
      if (building_ != &::google::protobuf::internal::kEmptyString) {
        building_->clear();
      }
    }
    if (has_collector()) {
      if (collector_ != &::google::protobuf::internal::kEmptyString) {
        collector_->clear();
      }
    }
    conn_type_ = 0u;
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    orig_data_ = 0;
    scale_data_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    coef_a_ = 0;
    coef_b_ = 0;
    if (has_data_time()) {
      if (data_time_ != &::google::protobuf::internal::kEmptyString) {
        data_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string building = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_building()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->building().data(), this->building().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collector;
        break;
      }
      
      // required string collector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collector()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collector().data(), this->collector().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conn_type;
        break;
      }
      
      // required uint32 conn_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_type_)));
          set_has_conn_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }
      
      // required string device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_orig_data;
        break;
      }
      
      // required float orig_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orig_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orig_data_)));
          set_has_orig_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scale_data;
        break;
      }
      
      // required float scale_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_data_)));
          set_has_scale_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }
      
      // required string desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_unit;
        break;
      }
      
      // required string unit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_coef_A;
        break;
      }
      
      // required float coef_A = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coef_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coef_a_)));
          set_has_coef_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_coef_B;
        break;
      }
      
      // required float coef_B = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coef_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coef_b_)));
          set_has_coef_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_data_time;
        break;
      }
      
      // required string data_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_time().data(), this->data_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string building = 1;
  if (has_building()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->building().data(), this->building().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->building(), output);
  }
  
  // required string collector = 2;
  if (has_collector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collector().data(), this->collector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->collector(), output);
  }
  
  // required uint32 conn_type = 3;
  if (has_conn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->conn_type(), output);
  }
  
  // required string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device(), output);
  }
  
  // required float orig_data = 5;
  if (has_orig_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orig_data(), output);
  }
  
  // required float scale_data = 6;
  if (has_scale_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale_data(), output);
  }
  
  // required string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->desc(), output);
  }
  
  // required string unit = 8;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->unit(), output);
  }
  
  // required float coef_A = 9;
  if (has_coef_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->coef_a(), output);
  }
  
  // required float coef_B = 10;
  if (has_coef_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->coef_b(), output);
  }
  
  // required string data_time = 11;
  if (has_data_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_time().data(), this->data_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->data_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string building = 1;
  if (has_building()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->building().data(), this->building().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->building(), target);
  }
  
  // required string collector = 2;
  if (has_collector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collector().data(), this->collector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collector(), target);
  }
  
  // required uint32 conn_type = 3;
  if (has_conn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->conn_type(), target);
  }
  
  // required string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device(), target);
  }
  
  // required float orig_data = 5;
  if (has_orig_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orig_data(), target);
  }
  
  // required float scale_data = 6;
  if (has_scale_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale_data(), target);
  }
  
  // required string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->desc(), target);
  }
  
  // required string unit = 8;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unit(), target);
  }
  
  // required float coef_A = 9;
  if (has_coef_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->coef_a(), target);
  }
  
  // required float coef_B = 10;
  if (has_coef_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->coef_b(), target);
  }
  
  // required string data_time = 11;
  if (has_data_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_time().data(), this->data_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->data_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string building = 1;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->building());
    }
    
    // required string collector = 2;
    if (has_collector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collector());
    }
    
    // required uint32 conn_type = 3;
    if (has_conn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conn_type());
    }
    
    // required string device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }
    
    // required float orig_data = 5;
    if (has_orig_data()) {
      total_size += 1 + 4;
    }
    
    // required float scale_data = 6;
    if (has_scale_data()) {
      total_size += 1 + 4;
    }
    
    // required string desc = 7;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // required string unit = 8;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float coef_A = 9;
    if (has_coef_a()) {
      total_size += 1 + 4;
    }
    
    // required float coef_B = 10;
    if (has_coef_b()) {
      total_size += 1 + 4;
    }
    
    // required string data_time = 11;
    if (has_data_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataReq::MergeFrom(const DataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building()) {
      set_building(from.building());
    }
    if (from.has_collector()) {
      set_collector(from.collector());
    }
    if (from.has_conn_type()) {
      set_conn_type(from.conn_type());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_orig_data()) {
      set_orig_data(from.orig_data());
    }
    if (from.has_scale_data()) {
      set_scale_data(from.scale_data());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coef_a()) {
      set_coef_a(from.coef_a());
    }
    if (from.has_coef_b()) {
      set_coef_b(from.coef_b());
    }
    if (from.has_data_time()) {
      set_data_time(from.data_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReq::CopyFrom(const DataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void DataReq::Swap(DataReq* other) {
  if (other != this) {
    std::swap(building_, other->building_);
    std::swap(collector_, other->collector_);
    std::swap(conn_type_, other->conn_type_);
    std::swap(device_, other->device_);
    std::swap(orig_data_, other->orig_data_);
    std::swap(scale_data_, other->scale_data_);
    std::swap(desc_, other->desc_);
    std::swap(unit_, other->unit_);
    std::swap(coef_a_, other->coef_a_);
    std::swap(coef_b_, other->coef_b_);
    std::swap(data_time_, other->data_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReq_descriptor_;
  metadata.reflection = DataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResp::kErrcodeFieldNumber;
const int DataResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DataResp::DataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataResp::InitAsDefaultInstance() {
}

DataResp::DataResp(const DataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataResp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResp::~DataResp() {
  SharedDtor();
}

void DataResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResp_descriptor_;
}

const DataResp& DataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data2server_2eproto();  return *default_instance_;
}

DataResp* DataResp::default_instance_ = NULL;

DataResp* DataResp::New() const {
  return new DataResp;
}

void DataResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }
      
      // required string errmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }
  
  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }
  
  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // required string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResp::MergeFrom(const DataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResp::CopyFrom(const DataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DataResp::Swap(DataResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResp_descriptor_;
  metadata.reflection = DataResp_reflection_;
  return metadata;
}


// ===================================================================

DataService::~DataService() {}

const ::google::protobuf::ServiceDescriptor* DataService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DataService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataService_descriptor_;
}

void DataService::Send(::google::protobuf::RpcController* controller,
                         const ::data2server::DataReq*,
                         ::data2server::DataResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Send() not implemented.");
  done->Run();
}

void DataService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DataService_descriptor_);
  switch(method->index()) {
    case 0:
      Send(controller,
             ::google::protobuf::down_cast<const ::data2server::DataReq*>(request),
             ::google::protobuf::down_cast< ::data2server::DataResp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DataService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::data2server::DataReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DataService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::data2server::DataResp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DataService_Stub::DataService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DataService_Stub::DataService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DataService_Stub::~DataService_Stub() {
  if (owns_channel_) delete channel_;
}

void DataService_Stub::Send(::google::protobuf::RpcController* controller,
                              const ::data2server::DataReq* request,
                              ::data2server::DataResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace data2server

// @@protoc_insertion_point(global_scope)
