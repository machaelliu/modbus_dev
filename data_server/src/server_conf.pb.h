// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_conf.proto

#ifndef PROTOBUF_INCLUDED_server_5fconf_2eproto
#define PROTOBUF_INCLUDED_server_5fconf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fconf_2eproto 

namespace protobuf_server_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fconf_2eproto
namespace data_server {
class MysqlConf;
class MysqlConfDefaultTypeInternal;
extern MysqlConfDefaultTypeInternal _MysqlConf_default_instance_;
class RedisConf;
class RedisConfDefaultTypeInternal;
extern RedisConfDefaultTypeInternal _RedisConf_default_instance_;
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
}  // namespace data_server
namespace google {
namespace protobuf {
template<> ::data_server::MysqlConf* Arena::CreateMaybeMessage<::data_server::MysqlConf>(Arena*);
template<> ::data_server::RedisConf* Arena::CreateMaybeMessage<::data_server::RedisConf>(Arena*);
template<> ::data_server::ServerConfig* Arena::CreateMaybeMessage<::data_server::ServerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace data_server {

// ===================================================================

class MysqlConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_server.MysqlConf) */ {
 public:
  MysqlConf();
  virtual ~MysqlConf();

  MysqlConf(const MysqlConf& from);

  inline MysqlConf& operator=(const MysqlConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlConf(MysqlConf&& from) noexcept
    : MysqlConf() {
    *this = ::std::move(from);
  }

  inline MysqlConf& operator=(MysqlConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlConf* internal_default_instance() {
    return reinterpret_cast<const MysqlConf*>(
               &_MysqlConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MysqlConf* other);
  friend void swap(MysqlConf& a, MysqlConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlConf* New() const final {
    return CreateMaybeMessage<MysqlConf>(NULL);
  }

  MysqlConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlConf& from);
  void MergeFrom(const MysqlConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required string passwd = 3;
  bool has_passwd() const;
  void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // required string user = 4;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string db_name = 5;
  bool has_db_name() const;
  void clear_db_name();
  static const int kDbNameFieldNumber = 5;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data_server.MysqlConf)
 private:
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();
  void set_has_passwd();
  void clear_has_passwd();
  void set_has_user();
  void clear_has_user();
  void set_has_db_name();
  void clear_has_db_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_server_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedisConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_server.RedisConf) */ {
 public:
  RedisConf();
  virtual ~RedisConf();

  RedisConf(const RedisConf& from);

  inline RedisConf& operator=(const RedisConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisConf(RedisConf&& from) noexcept
    : RedisConf() {
    *this = ::std::move(from);
  }

  inline RedisConf& operator=(RedisConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisConf* internal_default_instance() {
    return reinterpret_cast<const RedisConf*>(
               &_RedisConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RedisConf* other);
  friend void swap(RedisConf& a, RedisConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisConf* New() const final {
    return CreateMaybeMessage<RedisConf>(NULL);
  }

  RedisConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedisConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedisConf& from);
  void MergeFrom(const RedisConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data_server.RedisConf)
 private:
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_server_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_server.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerConfig* other);
  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return CreateMaybeMessage<ServerConfig>(NULL);
  }

  ServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log4cpp_conf = 2;
  bool has_log4cpp_conf() const;
  void clear_log4cpp_conf();
  static const int kLog4CppConfFieldNumber = 2;
  const ::std::string& log4cpp_conf() const;
  void set_log4cpp_conf(const ::std::string& value);
  #if LANG_CXX11
  void set_log4cpp_conf(::std::string&& value);
  #endif
  void set_log4cpp_conf(const char* value);
  void set_log4cpp_conf(const char* value, size_t size);
  ::std::string* mutable_log4cpp_conf();
  ::std::string* release_log4cpp_conf();
  void set_allocated_log4cpp_conf(::std::string* log4cpp_conf);

  // required string brpc_log = 3;
  bool has_brpc_log() const;
  void clear_brpc_log();
  static const int kBrpcLogFieldNumber = 3;
  const ::std::string& brpc_log() const;
  void set_brpc_log(const ::std::string& value);
  #if LANG_CXX11
  void set_brpc_log(::std::string&& value);
  #endif
  void set_brpc_log(const char* value);
  void set_brpc_log(const char* value, size_t size);
  ::std::string* mutable_brpc_log();
  ::std::string* release_brpc_log();
  void set_allocated_brpc_log(::std::string* brpc_log);

  // required string db_tab_name = 5;
  bool has_db_tab_name() const;
  void clear_db_tab_name();
  static const int kDbTabNameFieldNumber = 5;
  const ::std::string& db_tab_name() const;
  void set_db_tab_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_tab_name(::std::string&& value);
  #endif
  void set_db_tab_name(const char* value);
  void set_db_tab_name(const char* value, size_t size);
  ::std::string* mutable_db_tab_name();
  ::std::string* release_db_tab_name();
  void set_allocated_db_tab_name(::std::string* db_tab_name);

  // required .data_server.MysqlConf data_db = 4;
  bool has_data_db() const;
  void clear_data_db();
  static const int kDataDbFieldNumber = 4;
  private:
  const ::data_server::MysqlConf& _internal_data_db() const;
  public:
  const ::data_server::MysqlConf& data_db() const;
  ::data_server::MysqlConf* release_data_db();
  ::data_server::MysqlConf* mutable_data_db();
  void set_allocated_data_db(::data_server::MysqlConf* data_db);

  // required int32 svr_port = 1;
  bool has_svr_port() const;
  void clear_svr_port();
  static const int kSvrPortFieldNumber = 1;
  ::google::protobuf::int32 svr_port() const;
  void set_svr_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data_server.ServerConfig)
 private:
  void set_has_svr_port();
  void clear_has_svr_port();
  void set_has_log4cpp_conf();
  void clear_has_log4cpp_conf();
  void set_has_brpc_log();
  void clear_has_brpc_log();
  void set_has_data_db();
  void clear_has_data_db();
  void set_has_db_tab_name();
  void clear_has_db_tab_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log4cpp_conf_;
  ::google::protobuf::internal::ArenaStringPtr brpc_log_;
  ::google::protobuf::internal::ArenaStringPtr db_tab_name_;
  ::data_server::MysqlConf* data_db_;
  ::google::protobuf::int32 svr_port_;
  friend struct ::protobuf_server_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MysqlConf

// required string host = 1;
inline bool MysqlConf::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlConf::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlConf::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlConf::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& MysqlConf::host() const {
  // @@protoc_insertion_point(field_get:data_server.MysqlConf.host)
  return host_.GetNoArena();
}
inline void MysqlConf::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.MysqlConf.host)
}
#if LANG_CXX11
inline void MysqlConf::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.MysqlConf.host)
}
#endif
inline void MysqlConf::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.MysqlConf.host)
}
inline void MysqlConf::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.MysqlConf.host)
}
inline ::std::string* MysqlConf::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:data_server.MysqlConf.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlConf::release_host() {
  // @@protoc_insertion_point(field_release:data_server.MysqlConf.host)
  if (!has_host()) {
    return NULL;
  }
  clear_has_host();
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConf::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:data_server.MysqlConf.host)
}

// required int32 port = 2;
inline bool MysqlConf::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MysqlConf::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MysqlConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MysqlConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MysqlConf::port() const {
  // @@protoc_insertion_point(field_get:data_server.MysqlConf.port)
  return port_;
}
inline void MysqlConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:data_server.MysqlConf.port)
}

// required string passwd = 3;
inline bool MysqlConf::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysqlConf::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysqlConf::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysqlConf::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passwd();
}
inline const ::std::string& MysqlConf::passwd() const {
  // @@protoc_insertion_point(field_get:data_server.MysqlConf.passwd)
  return passwd_.GetNoArena();
}
inline void MysqlConf::set_passwd(const ::std::string& value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.MysqlConf.passwd)
}
#if LANG_CXX11
inline void MysqlConf::set_passwd(::std::string&& value) {
  set_has_passwd();
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.MysqlConf.passwd)
}
#endif
inline void MysqlConf::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.MysqlConf.passwd)
}
inline void MysqlConf::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.MysqlConf.passwd)
}
inline ::std::string* MysqlConf::mutable_passwd() {
  set_has_passwd();
  // @@protoc_insertion_point(field_mutable:data_server.MysqlConf.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlConf::release_passwd() {
  // @@protoc_insertion_point(field_release:data_server.MysqlConf.passwd)
  if (!has_passwd()) {
    return NULL;
  }
  clear_has_passwd();
  return passwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConf::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    set_has_passwd();
  } else {
    clear_has_passwd();
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:data_server.MysqlConf.passwd)
}

// required string user = 4;
inline bool MysqlConf::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MysqlConf::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MysqlConf::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MysqlConf::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& MysqlConf::user() const {
  // @@protoc_insertion_point(field_get:data_server.MysqlConf.user)
  return user_.GetNoArena();
}
inline void MysqlConf::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.MysqlConf.user)
}
#if LANG_CXX11
inline void MysqlConf::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.MysqlConf.user)
}
#endif
inline void MysqlConf::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.MysqlConf.user)
}
inline void MysqlConf::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.MysqlConf.user)
}
inline ::std::string* MysqlConf::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:data_server.MysqlConf.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlConf::release_user() {
  // @@protoc_insertion_point(field_release:data_server.MysqlConf.user)
  if (!has_user()) {
    return NULL;
  }
  clear_has_user();
  return user_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConf::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:data_server.MysqlConf.user)
}

// required string db_name = 5;
inline bool MysqlConf::has_db_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MysqlConf::set_has_db_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MysqlConf::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MysqlConf::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
inline const ::std::string& MysqlConf::db_name() const {
  // @@protoc_insertion_point(field_get:data_server.MysqlConf.db_name)
  return db_name_.GetNoArena();
}
inline void MysqlConf::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.MysqlConf.db_name)
}
#if LANG_CXX11
inline void MysqlConf::set_db_name(::std::string&& value) {
  set_has_db_name();
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.MysqlConf.db_name)
}
#endif
inline void MysqlConf::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.MysqlConf.db_name)
}
inline void MysqlConf::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.MysqlConf.db_name)
}
inline ::std::string* MysqlConf::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:data_server.MysqlConf.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlConf::release_db_name() {
  // @@protoc_insertion_point(field_release:data_server.MysqlConf.db_name)
  if (!has_db_name()) {
    return NULL;
  }
  clear_has_db_name();
  return db_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConf::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:data_server.MysqlConf.db_name)
}

// -------------------------------------------------------------------

// RedisConf

// required string host = 1;
inline bool RedisConf::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisConf::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisConf::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisConf::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& RedisConf::host() const {
  // @@protoc_insertion_point(field_get:data_server.RedisConf.host)
  return host_.GetNoArena();
}
inline void RedisConf::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.RedisConf.host)
}
#if LANG_CXX11
inline void RedisConf::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.RedisConf.host)
}
#endif
inline void RedisConf::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.RedisConf.host)
}
inline void RedisConf::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.RedisConf.host)
}
inline ::std::string* RedisConf::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:data_server.RedisConf.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisConf::release_host() {
  // @@protoc_insertion_point(field_release:data_server.RedisConf.host)
  if (!has_host()) {
    return NULL;
  }
  clear_has_host();
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisConf::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:data_server.RedisConf.host)
}

// required int32 port = 2;
inline bool RedisConf::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisConf::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 RedisConf::port() const {
  // @@protoc_insertion_point(field_get:data_server.RedisConf.port)
  return port_;
}
inline void RedisConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:data_server.RedisConf.port)
}

// -------------------------------------------------------------------

// ServerConfig

// required int32 svr_port = 1;
inline bool ServerConfig::has_svr_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_svr_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_svr_port() {
  svr_port_ = 0;
  clear_has_svr_port();
}
inline ::google::protobuf::int32 ServerConfig::svr_port() const {
  // @@protoc_insertion_point(field_get:data_server.ServerConfig.svr_port)
  return svr_port_;
}
inline void ServerConfig::set_svr_port(::google::protobuf::int32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:data_server.ServerConfig.svr_port)
}

// required string log4cpp_conf = 2;
inline bool ServerConfig::has_log4cpp_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_log4cpp_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_log4cpp_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_log4cpp_conf() {
  log4cpp_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log4cpp_conf();
}
inline const ::std::string& ServerConfig::log4cpp_conf() const {
  // @@protoc_insertion_point(field_get:data_server.ServerConfig.log4cpp_conf)
  return log4cpp_conf_.GetNoArena();
}
inline void ServerConfig::set_log4cpp_conf(const ::std::string& value) {
  set_has_log4cpp_conf();
  log4cpp_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.ServerConfig.log4cpp_conf)
}
#if LANG_CXX11
inline void ServerConfig::set_log4cpp_conf(::std::string&& value) {
  set_has_log4cpp_conf();
  log4cpp_conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.ServerConfig.log4cpp_conf)
}
#endif
inline void ServerConfig::set_log4cpp_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log4cpp_conf();
  log4cpp_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.ServerConfig.log4cpp_conf)
}
inline void ServerConfig::set_log4cpp_conf(const char* value, size_t size) {
  set_has_log4cpp_conf();
  log4cpp_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.ServerConfig.log4cpp_conf)
}
inline ::std::string* ServerConfig::mutable_log4cpp_conf() {
  set_has_log4cpp_conf();
  // @@protoc_insertion_point(field_mutable:data_server.ServerConfig.log4cpp_conf)
  return log4cpp_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_log4cpp_conf() {
  // @@protoc_insertion_point(field_release:data_server.ServerConfig.log4cpp_conf)
  if (!has_log4cpp_conf()) {
    return NULL;
  }
  clear_has_log4cpp_conf();
  return log4cpp_conf_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_log4cpp_conf(::std::string* log4cpp_conf) {
  if (log4cpp_conf != NULL) {
    set_has_log4cpp_conf();
  } else {
    clear_has_log4cpp_conf();
  }
  log4cpp_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log4cpp_conf);
  // @@protoc_insertion_point(field_set_allocated:data_server.ServerConfig.log4cpp_conf)
}

// required string brpc_log = 3;
inline bool ServerConfig::has_brpc_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_brpc_log() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_brpc_log() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_brpc_log() {
  brpc_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brpc_log();
}
inline const ::std::string& ServerConfig::brpc_log() const {
  // @@protoc_insertion_point(field_get:data_server.ServerConfig.brpc_log)
  return brpc_log_.GetNoArena();
}
inline void ServerConfig::set_brpc_log(const ::std::string& value) {
  set_has_brpc_log();
  brpc_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.ServerConfig.brpc_log)
}
#if LANG_CXX11
inline void ServerConfig::set_brpc_log(::std::string&& value) {
  set_has_brpc_log();
  brpc_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.ServerConfig.brpc_log)
}
#endif
inline void ServerConfig::set_brpc_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brpc_log();
  brpc_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.ServerConfig.brpc_log)
}
inline void ServerConfig::set_brpc_log(const char* value, size_t size) {
  set_has_brpc_log();
  brpc_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.ServerConfig.brpc_log)
}
inline ::std::string* ServerConfig::mutable_brpc_log() {
  set_has_brpc_log();
  // @@protoc_insertion_point(field_mutable:data_server.ServerConfig.brpc_log)
  return brpc_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_brpc_log() {
  // @@protoc_insertion_point(field_release:data_server.ServerConfig.brpc_log)
  if (!has_brpc_log()) {
    return NULL;
  }
  clear_has_brpc_log();
  return brpc_log_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_brpc_log(::std::string* brpc_log) {
  if (brpc_log != NULL) {
    set_has_brpc_log();
  } else {
    clear_has_brpc_log();
  }
  brpc_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brpc_log);
  // @@protoc_insertion_point(field_set_allocated:data_server.ServerConfig.brpc_log)
}

// required .data_server.MysqlConf data_db = 4;
inline bool ServerConfig::has_data_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_data_db() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_data_db() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_data_db() {
  if (data_db_ != NULL) data_db_->Clear();
  clear_has_data_db();
}
inline const ::data_server::MysqlConf& ServerConfig::_internal_data_db() const {
  return *data_db_;
}
inline const ::data_server::MysqlConf& ServerConfig::data_db() const {
  const ::data_server::MysqlConf* p = data_db_;
  // @@protoc_insertion_point(field_get:data_server.ServerConfig.data_db)
  return p != NULL ? *p : *reinterpret_cast<const ::data_server::MysqlConf*>(
      &::data_server::_MysqlConf_default_instance_);
}
inline ::data_server::MysqlConf* ServerConfig::release_data_db() {
  // @@protoc_insertion_point(field_release:data_server.ServerConfig.data_db)
  clear_has_data_db();
  ::data_server::MysqlConf* temp = data_db_;
  data_db_ = NULL;
  return temp;
}
inline ::data_server::MysqlConf* ServerConfig::mutable_data_db() {
  set_has_data_db();
  if (data_db_ == NULL) {
    auto* p = CreateMaybeMessage<::data_server::MysqlConf>(GetArenaNoVirtual());
    data_db_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_server.ServerConfig.data_db)
  return data_db_;
}
inline void ServerConfig::set_allocated_data_db(::data_server::MysqlConf* data_db) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_db_;
  }
  if (data_db) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_db = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_db, submessage_arena);
    }
    set_has_data_db();
  } else {
    clear_has_data_db();
  }
  data_db_ = data_db;
  // @@protoc_insertion_point(field_set_allocated:data_server.ServerConfig.data_db)
}

// required string db_tab_name = 5;
inline bool ServerConfig::has_db_tab_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_db_tab_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_db_tab_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_db_tab_name() {
  db_tab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_tab_name();
}
inline const ::std::string& ServerConfig::db_tab_name() const {
  // @@protoc_insertion_point(field_get:data_server.ServerConfig.db_tab_name)
  return db_tab_name_.GetNoArena();
}
inline void ServerConfig::set_db_tab_name(const ::std::string& value) {
  set_has_db_tab_name();
  db_tab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_server.ServerConfig.db_tab_name)
}
#if LANG_CXX11
inline void ServerConfig::set_db_tab_name(::std::string&& value) {
  set_has_db_tab_name();
  db_tab_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_server.ServerConfig.db_tab_name)
}
#endif
inline void ServerConfig::set_db_tab_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_tab_name();
  db_tab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_server.ServerConfig.db_tab_name)
}
inline void ServerConfig::set_db_tab_name(const char* value, size_t size) {
  set_has_db_tab_name();
  db_tab_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_server.ServerConfig.db_tab_name)
}
inline ::std::string* ServerConfig::mutable_db_tab_name() {
  set_has_db_tab_name();
  // @@protoc_insertion_point(field_mutable:data_server.ServerConfig.db_tab_name)
  return db_tab_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_db_tab_name() {
  // @@protoc_insertion_point(field_release:data_server.ServerConfig.db_tab_name)
  if (!has_db_tab_name()) {
    return NULL;
  }
  clear_has_db_tab_name();
  return db_tab_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_db_tab_name(::std::string* db_tab_name) {
  if (db_tab_name != NULL) {
    set_has_db_tab_name();
  } else {
    clear_has_db_tab_name();
  }
  db_tab_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_tab_name);
  // @@protoc_insertion_point(field_set_allocated:data_server.ServerConfig.db_tab_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_server

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fconf_2eproto
