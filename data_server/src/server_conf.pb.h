// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_conf.proto

#ifndef PROTOBUF_server_5fconf_2eproto__INCLUDED
#define PROTOBUF_server_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace data_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fconf_2eproto();
void protobuf_AssignDesc_server_5fconf_2eproto();
void protobuf_ShutdownFile_server_5fconf_2eproto();

class MysqlConf;
class RedisConf;
class ServerConfig;

// ===================================================================

class MysqlConf : public ::google::protobuf::Message {
 public:
  MysqlConf();
  virtual ~MysqlConf();
  
  MysqlConf(const MysqlConf& from);
  
  inline MysqlConf& operator=(const MysqlConf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlConf& default_instance();
  
  void Swap(MysqlConf* other);
  
  // implements Message ----------------------------------------------
  
  MysqlConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlConf& from);
  void MergeFrom(const MysqlConf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // required string db_name = 5;
  inline bool has_db_name() const;
  inline void clear_db_name();
  static const int kDbNameFieldNumber = 5;
  inline const ::std::string& db_name() const;
  inline void set_db_name(const ::std::string& value);
  inline void set_db_name(const char* value);
  inline void set_db_name(const char* value, size_t size);
  inline ::std::string* mutable_db_name();
  inline ::std::string* release_db_name();
  
  // @@protoc_insertion_point(class_scope:data_server.MysqlConf)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_db_name();
  inline void clear_has_db_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::std::string* passwd_;
  ::std::string* user_;
  ::std::string* db_name_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconf_2eproto();
  friend void protobuf_AssignDesc_server_5fconf_2eproto();
  friend void protobuf_ShutdownFile_server_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static MysqlConf* default_instance_;
};
// -------------------------------------------------------------------

class RedisConf : public ::google::protobuf::Message {
 public:
  RedisConf();
  virtual ~RedisConf();
  
  RedisConf(const RedisConf& from);
  
  inline RedisConf& operator=(const RedisConf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisConf& default_instance();
  
  void Swap(RedisConf* other);
  
  // implements Message ----------------------------------------------
  
  RedisConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisConf& from);
  void MergeFrom(const RedisConf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:data_server.RedisConf)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconf_2eproto();
  friend void protobuf_AssignDesc_server_5fconf_2eproto();
  friend void protobuf_ShutdownFile_server_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static RedisConf* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message {
 public:
  ServerConfig();
  virtual ~ServerConfig();
  
  ServerConfig(const ServerConfig& from);
  
  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();
  
  void Swap(ServerConfig* other);
  
  // implements Message ----------------------------------------------
  
  ServerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 svr_port = 1;
  inline bool has_svr_port() const;
  inline void clear_svr_port();
  static const int kSvrPortFieldNumber = 1;
  inline ::google::protobuf::int32 svr_port() const;
  inline void set_svr_port(::google::protobuf::int32 value);
  
  // required string log4cpp_conf = 2;
  inline bool has_log4cpp_conf() const;
  inline void clear_log4cpp_conf();
  static const int kLog4CppConfFieldNumber = 2;
  inline const ::std::string& log4cpp_conf() const;
  inline void set_log4cpp_conf(const ::std::string& value);
  inline void set_log4cpp_conf(const char* value);
  inline void set_log4cpp_conf(const char* value, size_t size);
  inline ::std::string* mutable_log4cpp_conf();
  inline ::std::string* release_log4cpp_conf();
  
  // required string brpc_log = 3;
  inline bool has_brpc_log() const;
  inline void clear_brpc_log();
  static const int kBrpcLogFieldNumber = 3;
  inline const ::std::string& brpc_log() const;
  inline void set_brpc_log(const ::std::string& value);
  inline void set_brpc_log(const char* value);
  inline void set_brpc_log(const char* value, size_t size);
  inline ::std::string* mutable_brpc_log();
  inline ::std::string* release_brpc_log();
  
  // required .data_server.MysqlConf data_db = 4;
  inline bool has_data_db() const;
  inline void clear_data_db();
  static const int kDataDbFieldNumber = 4;
  inline const ::data_server::MysqlConf& data_db() const;
  inline ::data_server::MysqlConf* mutable_data_db();
  inline ::data_server::MysqlConf* release_data_db();
  
  // required string data_point_table = 5;
  inline bool has_data_point_table() const;
  inline void clear_data_point_table();
  static const int kDataPointTableFieldNumber = 5;
  inline const ::std::string& data_point_table() const;
  inline void set_data_point_table(const ::std::string& value);
  inline void set_data_point_table(const char* value);
  inline void set_data_point_table(const char* value, size_t size);
  inline ::std::string* mutable_data_point_table();
  inline ::std::string* release_data_point_table();
  
  // required string mod_data_table = 6;
  inline bool has_mod_data_table() const;
  inline void clear_mod_data_table();
  static const int kModDataTableFieldNumber = 6;
  inline const ::std::string& mod_data_table() const;
  inline void set_mod_data_table(const ::std::string& value);
  inline void set_mod_data_table(const char* value);
  inline void set_mod_data_table(const char* value, size_t size);
  inline ::std::string* mutable_mod_data_table();
  inline ::std::string* release_mod_data_table();
  
  // @@protoc_insertion_point(class_scope:data_server.ServerConfig)
 private:
  inline void set_has_svr_port();
  inline void clear_has_svr_port();
  inline void set_has_log4cpp_conf();
  inline void clear_has_log4cpp_conf();
  inline void set_has_brpc_log();
  inline void clear_has_brpc_log();
  inline void set_has_data_db();
  inline void clear_has_data_db();
  inline void set_has_data_point_table();
  inline void clear_has_data_point_table();
  inline void set_has_mod_data_table();
  inline void clear_has_mod_data_table();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* log4cpp_conf_;
  ::std::string* brpc_log_;
  ::data_server::MysqlConf* data_db_;
  ::std::string* data_point_table_;
  ::std::string* mod_data_table_;
  ::google::protobuf::int32 svr_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconf_2eproto();
  friend void protobuf_AssignDesc_server_5fconf_2eproto();
  friend void protobuf_ShutdownFile_server_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// MysqlConf

// required string host = 1;
inline bool MysqlConf::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlConf::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlConf::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlConf::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& MysqlConf::host() const {
  return *host_;
}
inline void MysqlConf::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void MysqlConf::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void MysqlConf::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlConf::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* MysqlConf::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool MysqlConf::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysqlConf::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysqlConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysqlConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MysqlConf::port() const {
  return port_;
}
inline void MysqlConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required string passwd = 3;
inline bool MysqlConf::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MysqlConf::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MysqlConf::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MysqlConf::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& MysqlConf::passwd() const {
  return *passwd_;
}
inline void MysqlConf::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void MysqlConf::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void MysqlConf::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlConf::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* MysqlConf::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user = 4;
inline bool MysqlConf::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MysqlConf::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MysqlConf::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MysqlConf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& MysqlConf::user() const {
  return *user_;
}
inline void MysqlConf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void MysqlConf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void MysqlConf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlConf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* MysqlConf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string db_name = 5;
inline bool MysqlConf::has_db_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MysqlConf::set_has_db_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MysqlConf::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MysqlConf::clear_db_name() {
  if (db_name_ != &::google::protobuf::internal::kEmptyString) {
    db_name_->clear();
  }
  clear_has_db_name();
}
inline const ::std::string& MysqlConf::db_name() const {
  return *db_name_;
}
inline void MysqlConf::set_db_name(const ::std::string& value) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::kEmptyString) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
}
inline void MysqlConf::set_db_name(const char* value) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::kEmptyString) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
}
inline void MysqlConf::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::kEmptyString) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlConf::mutable_db_name() {
  set_has_db_name();
  if (db_name_ == &::google::protobuf::internal::kEmptyString) {
    db_name_ = new ::std::string;
  }
  return db_name_;
}
inline ::std::string* MysqlConf::release_db_name() {
  clear_has_db_name();
  if (db_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_name_;
    db_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RedisConf

// required string host = 1;
inline bool RedisConf::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisConf::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisConf::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisConf::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& RedisConf::host() const {
  return *host_;
}
inline void RedisConf::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RedisConf::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RedisConf::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedisConf::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* RedisConf::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool RedisConf::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisConf::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 RedisConf::port() const {
  return port_;
}
inline void RedisConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// ServerConfig

// required int32 svr_port = 1;
inline bool ServerConfig::has_svr_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_svr_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_svr_port() {
  svr_port_ = 0;
  clear_has_svr_port();
}
inline ::google::protobuf::int32 ServerConfig::svr_port() const {
  return svr_port_;
}
inline void ServerConfig::set_svr_port(::google::protobuf::int32 value) {
  set_has_svr_port();
  svr_port_ = value;
}

// required string log4cpp_conf = 2;
inline bool ServerConfig::has_log4cpp_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_log4cpp_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_log4cpp_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_log4cpp_conf() {
  if (log4cpp_conf_ != &::google::protobuf::internal::kEmptyString) {
    log4cpp_conf_->clear();
  }
  clear_has_log4cpp_conf();
}
inline const ::std::string& ServerConfig::log4cpp_conf() const {
  return *log4cpp_conf_;
}
inline void ServerConfig::set_log4cpp_conf(const ::std::string& value) {
  set_has_log4cpp_conf();
  if (log4cpp_conf_ == &::google::protobuf::internal::kEmptyString) {
    log4cpp_conf_ = new ::std::string;
  }
  log4cpp_conf_->assign(value);
}
inline void ServerConfig::set_log4cpp_conf(const char* value) {
  set_has_log4cpp_conf();
  if (log4cpp_conf_ == &::google::protobuf::internal::kEmptyString) {
    log4cpp_conf_ = new ::std::string;
  }
  log4cpp_conf_->assign(value);
}
inline void ServerConfig::set_log4cpp_conf(const char* value, size_t size) {
  set_has_log4cpp_conf();
  if (log4cpp_conf_ == &::google::protobuf::internal::kEmptyString) {
    log4cpp_conf_ = new ::std::string;
  }
  log4cpp_conf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_log4cpp_conf() {
  set_has_log4cpp_conf();
  if (log4cpp_conf_ == &::google::protobuf::internal::kEmptyString) {
    log4cpp_conf_ = new ::std::string;
  }
  return log4cpp_conf_;
}
inline ::std::string* ServerConfig::release_log4cpp_conf() {
  clear_has_log4cpp_conf();
  if (log4cpp_conf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log4cpp_conf_;
    log4cpp_conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string brpc_log = 3;
inline bool ServerConfig::has_brpc_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_brpc_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_brpc_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_brpc_log() {
  if (brpc_log_ != &::google::protobuf::internal::kEmptyString) {
    brpc_log_->clear();
  }
  clear_has_brpc_log();
}
inline const ::std::string& ServerConfig::brpc_log() const {
  return *brpc_log_;
}
inline void ServerConfig::set_brpc_log(const ::std::string& value) {
  set_has_brpc_log();
  if (brpc_log_ == &::google::protobuf::internal::kEmptyString) {
    brpc_log_ = new ::std::string;
  }
  brpc_log_->assign(value);
}
inline void ServerConfig::set_brpc_log(const char* value) {
  set_has_brpc_log();
  if (brpc_log_ == &::google::protobuf::internal::kEmptyString) {
    brpc_log_ = new ::std::string;
  }
  brpc_log_->assign(value);
}
inline void ServerConfig::set_brpc_log(const char* value, size_t size) {
  set_has_brpc_log();
  if (brpc_log_ == &::google::protobuf::internal::kEmptyString) {
    brpc_log_ = new ::std::string;
  }
  brpc_log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_brpc_log() {
  set_has_brpc_log();
  if (brpc_log_ == &::google::protobuf::internal::kEmptyString) {
    brpc_log_ = new ::std::string;
  }
  return brpc_log_;
}
inline ::std::string* ServerConfig::release_brpc_log() {
  clear_has_brpc_log();
  if (brpc_log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brpc_log_;
    brpc_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .data_server.MysqlConf data_db = 4;
inline bool ServerConfig::has_data_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_data_db() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_data_db() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_data_db() {
  if (data_db_ != NULL) data_db_->::data_server::MysqlConf::Clear();
  clear_has_data_db();
}
inline const ::data_server::MysqlConf& ServerConfig::data_db() const {
  return data_db_ != NULL ? *data_db_ : *default_instance_->data_db_;
}
inline ::data_server::MysqlConf* ServerConfig::mutable_data_db() {
  set_has_data_db();
  if (data_db_ == NULL) data_db_ = new ::data_server::MysqlConf;
  return data_db_;
}
inline ::data_server::MysqlConf* ServerConfig::release_data_db() {
  clear_has_data_db();
  ::data_server::MysqlConf* temp = data_db_;
  data_db_ = NULL;
  return temp;
}

// required string data_point_table = 5;
inline bool ServerConfig::has_data_point_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_data_point_table() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_data_point_table() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_data_point_table() {
  if (data_point_table_ != &::google::protobuf::internal::kEmptyString) {
    data_point_table_->clear();
  }
  clear_has_data_point_table();
}
inline const ::std::string& ServerConfig::data_point_table() const {
  return *data_point_table_;
}
inline void ServerConfig::set_data_point_table(const ::std::string& value) {
  set_has_data_point_table();
  if (data_point_table_ == &::google::protobuf::internal::kEmptyString) {
    data_point_table_ = new ::std::string;
  }
  data_point_table_->assign(value);
}
inline void ServerConfig::set_data_point_table(const char* value) {
  set_has_data_point_table();
  if (data_point_table_ == &::google::protobuf::internal::kEmptyString) {
    data_point_table_ = new ::std::string;
  }
  data_point_table_->assign(value);
}
inline void ServerConfig::set_data_point_table(const char* value, size_t size) {
  set_has_data_point_table();
  if (data_point_table_ == &::google::protobuf::internal::kEmptyString) {
    data_point_table_ = new ::std::string;
  }
  data_point_table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_data_point_table() {
  set_has_data_point_table();
  if (data_point_table_ == &::google::protobuf::internal::kEmptyString) {
    data_point_table_ = new ::std::string;
  }
  return data_point_table_;
}
inline ::std::string* ServerConfig::release_data_point_table() {
  clear_has_data_point_table();
  if (data_point_table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_point_table_;
    data_point_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mod_data_table = 6;
inline bool ServerConfig::has_mod_data_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_mod_data_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_mod_data_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_mod_data_table() {
  if (mod_data_table_ != &::google::protobuf::internal::kEmptyString) {
    mod_data_table_->clear();
  }
  clear_has_mod_data_table();
}
inline const ::std::string& ServerConfig::mod_data_table() const {
  return *mod_data_table_;
}
inline void ServerConfig::set_mod_data_table(const ::std::string& value) {
  set_has_mod_data_table();
  if (mod_data_table_ == &::google::protobuf::internal::kEmptyString) {
    mod_data_table_ = new ::std::string;
  }
  mod_data_table_->assign(value);
}
inline void ServerConfig::set_mod_data_table(const char* value) {
  set_has_mod_data_table();
  if (mod_data_table_ == &::google::protobuf::internal::kEmptyString) {
    mod_data_table_ = new ::std::string;
  }
  mod_data_table_->assign(value);
}
inline void ServerConfig::set_mod_data_table(const char* value, size_t size) {
  set_has_mod_data_table();
  if (mod_data_table_ == &::google::protobuf::internal::kEmptyString) {
    mod_data_table_ = new ::std::string;
  }
  mod_data_table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_mod_data_table() {
  set_has_mod_data_table();
  if (mod_data_table_ == &::google::protobuf::internal::kEmptyString) {
    mod_data_table_ = new ::std::string;
  }
  return mod_data_table_;
}
inline ::std::string* ServerConfig::release_mod_data_table() {
  clear_has_mod_data_table();
  if (mod_data_table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mod_data_table_;
    mod_data_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_server

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fconf_2eproto__INCLUDED
